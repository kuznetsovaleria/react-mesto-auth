{"ast":null,"code":"export class Api {\n  constructor({\n    baseUrl,\n    token\n  }) {\n    this._baseUrl = baseUrl;\n    this._token = token;\n  }\n\n  _handleOriginalResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n\n    return Promise.reject(`Ошибка ${res.status}`);\n  }\n\n  getUserData() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._handleOriginalResponse);\n  }\n\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(this._handleOriginalResponse);\n  }\n\n  editUserInfo(data) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка ${res.status}`);\n    });\n  }\n\n  addNewCard(data) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: data.name,\n        link: data.link\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка ${res.status}`);\n    });\n  }\n\n  putLike(_id) {\n    return fetch(`${this._baseUrl}/cards/likes/${_id}`, {\n      method: 'PUT',\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка ${res.status}`);\n    });\n  }\n\n  removeLike(_id) {\n    return fetch(`${this._baseUrl}/cards/likes/${_id}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка ${res.status}`);\n    });\n  }\n\n  deleteCard(_id) {\n    return fetch(`${this._baseUrl}/cards/${_id}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка ${res.status}`);\n    });\n  }\n\n  changeUserAvatar(data) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: data.link\n      })\n    }).then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      return Promise.reject(`Ошибка ${res.status}`);\n    });\n  }\n\n}\n;\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-19',\n  token: '05a9c3f8-8fc7-415a-8994-abcd561520ba'\n});\nexport default api;","map":{"version":3,"sources":["/Users/kuznetsovaleria/test/mesto-react/src/utils/api.js"],"names":["Api","constructor","baseUrl","token","_baseUrl","_token","_handleOriginalResponse","res","ok","json","Promise","reject","status","getUserData","fetch","headers","authorization","then","getInitialCards","editUserInfo","data","method","body","JSON","stringify","name","about","addNewCard","link","putLike","_id","removeLike","deleteCard","changeUserAvatar","avatar","api"],"mappings":"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","sourcesContent":["export class Api {\n    constructor({baseUrl, token}) {\n        this._baseUrl = baseUrl;\n        this._token = token;\n}\n\n    _handleOriginalResponse(res) {\n            if(res.ok) {\n                return res.json();\n            }\n            return Promise.reject(`Ошибка ${res.status}`);\n}\n\n    getUserData() {\n        return fetch(`${this._baseUrl}/users/me`, {\n            headers: {\n                authorization: this._token\n            }\n        })\n        .then(this._handleOriginalResponse)\n}\n\n    getInitialCards() {\n        return fetch(`${this._baseUrl}/cards`, {\n            headers: {\n                authorization: this._token\n            }\n        })\n            .then(this._handleOriginalResponse)\n}\n\n\n    editUserInfo(data) {\n        return fetch(`${this._baseUrl}/users/me`, {\n            method: 'PATCH',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: data.name,\n                about: data.about\n            })\n        })\n        .then(res => {\n            if(res.ok) {\n                return res.json();\n            }\n            return Promise.reject(`Ошибка ${res.status}`)\n        })\n}\n\n    addNewCard(data) {\n        return fetch(`${this._baseUrl}/cards`, {\n            method: 'POST',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                name: data.name,\n                link: data.link\n            })\n        })\n        .then(res => {\n            if(res.ok) {\n                return res.json();\n            }\n            return Promise.reject(`Ошибка ${res.status}`)\n        })\n}\n\n    putLike(_id) {\n        return fetch(`${this._baseUrl}/cards/likes/${_id}`, {\n            method: 'PUT',\n            headers: {\n                authorization: this._token,\n            },\n        })\n        .then(res => {\n            if(res.ok) {\n                return res.json();\n            }\n            return Promise.reject(`Ошибка ${res.status}`)\n        })\n}\n\n    removeLike(_id) {\n        return fetch(`${this._baseUrl}/cards/likes/${_id}`, {\n            method: 'DELETE',\n            headers: {\n                authorization: this._token,\n            },\n        })\n        .then(res => {\n            if(res.ok) {\n                return res.json();\n            }\n            return Promise.reject(`Ошибка ${res.status}`)\n        })\n}\n\n    deleteCard(_id) {\n        return fetch(`${this._baseUrl}/cards/${_id}`, {\n            method: 'DELETE',\n            headers: {\n                authorization: this._token,\n            },\n        })\n        .then(res => {\n            if(res.ok) {\n                return res.json();\n            }\n            return Promise.reject(`Ошибка ${res.status}`)\n        })\n}\n\n    changeUserAvatar(data) {\n        return fetch(`${this._baseUrl}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: {\n                authorization: this._token,\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                avatar: data.link\n            })\n        })\n        .then(res => {\n            if(res.ok) {\n                return res.json();\n            }\n            return Promise.reject(`Ошибка ${res.status}`)\n        })\n    }\n};\n\n const api = new Api({\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-19',\n    token: '05a9c3f8-8fc7-415a-8994-abcd561520ba'\n});\n\nexport default api"]},"metadata":{},"sourceType":"module"}